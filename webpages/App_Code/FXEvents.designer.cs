#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="tradejournal")]
public partial class FXEventsDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Updatecurrency(currency instance);
  partial void Updatecurrencypair(currencypair instance);
  partial void Insertfxerror(fxerror instance);
  partial void Updatefxerror(fxerror instance);
  partial void Deletefxerror(fxerror instance);
  partial void Updatefxevent_alias(fxevent_alias instance);
  partial void Updatefxevent_association(fxevent_association instance);
  partial void Updatefxevent_currencypair(fxevent_currencypair instance);
  partial void Updatefxevent_transaction(fxevent_transaction instance);
  partial void Updatefxevent(fxevent instance);
  #endregion
	
	public FXEventsDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["tradejournalConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public FXEventsDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FXEventsDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FXEventsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FXEventsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<currency> currencies
	{
		get
		{
			return this.GetTable<currency>();
		}
	}
	
	public System.Data.Linq.Table<currencypair> currencypairs
	{
		get
		{
			return this.GetTable<currencypair>();
		}
	}
	
	public System.Data.Linq.Table<fxerror> fxerrors
	{
		get
		{
			return this.GetTable<fxerror>();
		}
	}
	
	public System.Data.Linq.Table<fxevent_alias> fxevent_alias
	{
		get
		{
			return this.GetTable<fxevent_alias>();
		}
	}
	
	public System.Data.Linq.Table<fxevent_association> fxevent_associations
	{
		get
		{
			return this.GetTable<fxevent_association>();
		}
	}
	
	public System.Data.Linq.Table<fxevent_currencypair> fxevent_currencypairs
	{
		get
		{
			return this.GetTable<fxevent_currencypair>();
		}
	}
	
	public System.Data.Linq.Table<fxevent_transaction> fxevent_transactions
	{
		get
		{
			return this.GetTable<fxevent_transaction>();
		}
	}
	
	public System.Data.Linq.Table<fxevent> fxevents
	{
		get
		{
			return this.GetTable<fxevent>();
		}
	}
	
	private void Insertcurrency(currency obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddCurrency(obj.currencyid, obj.name, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletecurrency(currency obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.DelCurrency(obj.currencyid, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Insertcurrencypair(currencypair obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddCurrencyPair(obj.@base, obj.quote, ((System.Nullable<decimal>)(obj.boughtsold_level)), ((System.Nullable<byte>)(obj.inactive)), ((System.Nullable<System.DateTime>)(obj.lastmodified)), ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletecurrencypair(currencypair obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.DelCurrencyPair(obj.@base, obj.quote, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Insertfxevent_alias(fxevent_alias obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddEventAlias(obj.eventid, default(string), ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletefxevent_alias(fxevent_alias obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.DelEventAlias(obj.eventid, default(string), ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Insertfxevent_association(fxevent_association obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddEventAssociation(obj.eventid, obj.ind_id, ((System.Nullable<int>)(obj.ind_order)), ((System.Nullable<short>)(obj.ind_importance)), ((System.Nullable<decimal>)(obj.ind_positive_threshhold)), ((System.Nullable<short>)(obj.ind_positive_threshhold_weight)), ((System.Nullable<decimal>)(obj.ind_negative_threshhold)), ((System.Nullable<short>)(obj.ind_negative_threshhold_weight)), ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletefxevent_association(fxevent_association obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.DelEventAssociation(obj.eventid, obj.ind_id, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Insertfxevent_currencypair(fxevent_currencypair obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddEventCurrencyPair(obj.eventid, obj.@base, obj.quote, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletefxevent_currencypair(fxevent_currencypair obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.DelEventCurrencyPair(obj.eventid, obj.@base, obj.quote, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Insertfxevent_transaction(fxevent_transaction obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddEventTransaction(obj.eventid, default(System.Nullable<byte>), ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletefxevent_transaction(fxevent_transaction obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.CloseEventTransaction(obj.eventid, default(System.Nullable<byte>), default(System.Nullable<int>), ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Insertfxevent(fxevent obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.AddEvent(obj.eventid, obj.name, ((System.Nullable<byte>)(obj.recurring)), ((System.Nullable<System.DateTime>)(obj.next_date)), ((System.Nullable<System.TimeSpan>)(obj.next_time)), ((System.Nullable<short>)(obj.importance)), ((System.Nullable<decimal>)(obj.previous)), ((System.Nullable<byte>)(obj.watch)), obj.currency, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	private void Deletefxevent(fxevent obj)
	{
		System.Nullable<int> p1 = obj.err_no;
		string p2 = obj.err_desc;
		this.DelEvent(obj.eventid, ref p1, ref p2);
		obj.err_no = p1.GetValueOrDefault();
		obj.err_desc = p2;
	}
	
	[Function(Name="dbo.spFX_AddCurrency")]
	public int AddCurrency([Parameter(DbType="NVarChar(3)")] string currency, [Parameter(DbType="NVarChar(50)")] string name, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), currency, name, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(2)));
		err_desc = ((string)(result.GetParameterValue(3)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_DelCurrencyPair")]
	public int DelCurrencyPair([Parameter(Name="base", DbType="NVarChar(3)")] string @base, [Parameter(DbType="NVarChar(3)")] string quote, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), @base, quote, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(2)));
		err_desc = ((string)(result.GetParameterValue(3)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_AddCurrencyPair")]
	public int AddCurrencyPair([Parameter(Name="base", DbType="NVarChar(3)")] string @base, [Parameter(DbType="NVarChar(3)")] string quote, [Parameter(DbType="Decimal")] System.Nullable<decimal> boughtsold_level, [Parameter(DbType="TinyInt")] System.Nullable<byte> inactive, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> lastmodified, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), @base, quote, boughtsold_level, inactive, lastmodified, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(5)));
		err_desc = ((string)(result.GetParameterValue(6)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_AddEvent")]
	public int AddEvent([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="NVarChar(50)")] string name, [Parameter(DbType="TinyInt")] System.Nullable<byte> recurring, [Parameter(DbType="Date")] System.Nullable<System.DateTime> next_date, [Parameter(DbType="Time")] System.Nullable<System.TimeSpan> next_time, [Parameter(DbType="SmallInt")] System.Nullable<short> importance, [Parameter(DbType="Decimal")] System.Nullable<decimal> previous, [Parameter(DbType="TinyInt")] System.Nullable<byte> watch, [Parameter(DbType="NChar(3)")] string currency, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, name, recurring, next_date, next_time, importance, previous, watch, currency, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(9)));
		err_desc = ((string)(result.GetParameterValue(10)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_AddEventAlias")]
	public int AddEventAlias([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="NVarChar(50)")] string aliasname, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, aliasname, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(2)));
		err_desc = ((string)(result.GetParameterValue(3)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_AddEventAssociation")]
	public int AddEventAssociation([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="NVarChar(10)")] string ind_id, [Parameter(DbType="Int")] System.Nullable<int> ind_order, [Parameter(DbType="SmallInt")] System.Nullable<short> ind_importance, [Parameter(DbType="Decimal")] System.Nullable<decimal> ind_positive_threshhold, [Parameter(DbType="SmallInt")] System.Nullable<short> ind_positive_threshhold_weight, [Parameter(DbType="Decimal")] System.Nullable<decimal> ind_negative_threshhold, [Parameter(DbType="SmallInt")] System.Nullable<short> ind_negative_threshhold_weight, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, ind_id, ind_order, ind_importance, ind_positive_threshhold, ind_positive_threshhold_weight, ind_negative_threshhold, ind_negative_threshhold_weight, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(8)));
		err_desc = ((string)(result.GetParameterValue(9)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_AddEventCurrencyPair")]
	public int AddEventCurrencyPair([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(Name="base", DbType="NChar(3)")] string @base, [Parameter(DbType="NChar(3)")] string quote, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, @base, quote, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(3)));
		err_desc = ((string)(result.GetParameterValue(4)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_AddEventTransaction")]
	public int AddEventTransaction([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="TinyInt")] System.Nullable<byte> ignore_watch, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, ignore_watch, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(2)));
		err_desc = ((string)(result.GetParameterValue(3)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_CloseEventTransaction")]
	public int CloseEventTransaction([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="TinyInt")] System.Nullable<byte> ignore_date, [Parameter(DbType="Int")] System.Nullable<int> status, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, ignore_date, status, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(3)));
		err_desc = ((string)(result.GetParameterValue(4)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_DelCurrency")]
	public int DelCurrency([Parameter(DbType="NVarChar(3)")] string currency, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), currency, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(1)));
		err_desc = ((string)(result.GetParameterValue(2)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetEventTransactions")]
	public ISingleResult<spFX_GetEventTransactionsResult> GetEventTransactions([Parameter(DbType="Int")] System.Nullable<int> eventid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid);
		return ((ISingleResult<spFX_GetEventTransactionsResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_DelEvent")]
	public int DelEvent([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(1)));
		err_desc = ((string)(result.GetParameterValue(2)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_DelEventAlias")]
	public int DelEventAlias([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="NVarChar(50)")] string aliasname, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, aliasname, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(2)));
		err_desc = ((string)(result.GetParameterValue(3)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_DelEventAssociation")]
	public int DelEventAssociation([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(DbType="NVarChar(10)")] string ind_id, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, ind_id, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(2)));
		err_desc = ((string)(result.GetParameterValue(3)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_DelEventCurrencyPair")]
	public int DelEventCurrencyPair([Parameter(DbType="NVarChar(10)")] string eventid, [Parameter(Name="base", DbType="NChar(3)")] string @base, [Parameter(DbType="NChar(3)")] string quote, [Parameter(DbType="Int")] ref System.Nullable<int> err_no, [Parameter(DbType="NVarChar(255)")] ref string err_desc)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid, @base, quote, err_no, err_desc);
		err_no = ((System.Nullable<int>)(result.GetParameterValue(3)));
		err_desc = ((string)(result.GetParameterValue(4)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetCurrency")]
	public ISingleResult<spFX_GetCurrencyResult> GetCurrency([Parameter(DbType="NVarChar(3)")] string currency)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), currency);
		return ((ISingleResult<spFX_GetCurrencyResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetCurrencyPair")]
	public ISingleResult<spFX_GetCurrencyPairResult> GetCurrencyPair([Parameter(Name="base", DbType="NVarChar(3)")] string @base, [Parameter(DbType="NVarChar(3)")] string quote)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), @base, quote);
		return ((ISingleResult<spFX_GetCurrencyPairResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetEvent")]
	public ISingleResult<spFX_GetEventResult> GetEvent([Parameter(DbType="Int")] System.Nullable<int> eventid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid);
		return ((ISingleResult<spFX_GetEventResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetEventAliases")]
	public ISingleResult<spFX_GetEventAliasesResult> GetEventAliases([Parameter(DbType="Int")] System.Nullable<int> eventid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid);
		return ((ISingleResult<spFX_GetEventAliasesResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetEventCurrencyPairs")]
	public ISingleResult<spFX_GetEventCurrencyPairsResult> GetEventCurrencyPairs([Parameter(DbType="Int")] System.Nullable<int> eventid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid);
		return ((ISingleResult<spFX_GetEventCurrencyPairsResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetEventIndicators")]
	public ISingleResult<spFX_GetEventIndicatorsResult> GetEventIndicators([Parameter(DbType="Int")] System.Nullable<int> eventid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid);
		return ((ISingleResult<spFX_GetEventIndicatorsResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.spFX_GetEventTransactionLast")]
	public ISingleResult<spFX_GetEventTransactionLastResult> GetEventTransactionLast([Parameter(DbType="Int")] System.Nullable<int> eventid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventid);
		return ((ISingleResult<spFX_GetEventTransactionLastResult>)(result.ReturnValue));
	}
}

[Table(Name="dbo.vFX_Currencies")]
[DataContract()]
public partial class currency : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _currencyid;
	
	private string _name;
	
	private System.DateTime _lastmodified;
	
	private int _err_no;
	
	private string _err_desc;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncurrencyidChanging(string value);
    partial void OncurrencyidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastmodifiedChanging(System.DateTime value);
    partial void OnlastmodifiedChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public currency()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Name="currency", Storage="_currencyid", DbType="NChar(3) NOT NULL", CanBeNull=false)]
	[DataMember(Order=2)]
	public string currencyid
	{
		get
		{
			return this._currencyid;
		}
		set
		{
			if ((this._currencyid != value))
			{
				this.OncurrencyidChanging(value);
				this.SendPropertyChanging();
				this._currencyid = value;
				this.SendPropertyChanged("currencyid");
				this.OncurrencyidChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NChar(50)")]
	[DataMember(Order=3)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_lastmodified", DbType="DateTime2 NOT NULL")]
	[DataMember(Order=4)]
	public System.DateTime lastmodified
	{
		get
		{
			return this._lastmodified;
		}
		set
		{
			if ((this._lastmodified != value))
			{
				this.OnlastmodifiedChanging(value);
				this.SendPropertyChanging();
				this._lastmodified = value;
				this.SendPropertyChanged("lastmodified");
				this.OnlastmodifiedChanged();
			}
		}
	}
	
	[Column(Storage="_err_no")]
	[DataMember(Order=5)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", CanBeNull=false)]
	[DataMember(Order=6)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.vFX_CurrencyPairs")]
[DataContract()]
public partial class currencypair : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _base;
	
	private string _quote;
	
	private decimal _boughtsold_level;
	
	private byte _inactive;
	
	private System.DateTime _lastmodified;
	
	private int _err_no;
	
	private string _err_desc;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnbaseChanging(string value);
    partial void OnbaseChanged();
    partial void OnquoteChanging(string value);
    partial void OnquoteChanged();
    partial void Onboughtsold_levelChanging(decimal value);
    partial void Onboughtsold_levelChanged();
    partial void OninactiveChanging(byte value);
    partial void OninactiveChanged();
    partial void OnlastmodifiedChanging(System.DateTime value);
    partial void OnlastmodifiedChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public currencypair()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Name="base", Storage="_base", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public string @base
	{
		get
		{
			return this._base;
		}
		set
		{
			if ((this._base != value))
			{
				this.OnbaseChanging(value);
				this.SendPropertyChanging();
				this._base = value;
				this.SendPropertyChanged("@base");
				this.OnbaseChanged();
			}
		}
	}
	
	[Column(Storage="_quote", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public string quote
	{
		get
		{
			return this._quote;
		}
		set
		{
			if ((this._quote != value))
			{
				this.OnquoteChanging(value);
				this.SendPropertyChanging();
				this._quote = value;
				this.SendPropertyChanged("quote");
				this.OnquoteChanged();
			}
		}
	}
	
	[Column(Storage="_boughtsold_level", DbType="Decimal(1,1) NOT NULL")]
	[DataMember(Order=4)]
	public decimal boughtsold_level
	{
		get
		{
			return this._boughtsold_level;
		}
		set
		{
			if ((this._boughtsold_level != value))
			{
				this.Onboughtsold_levelChanging(value);
				this.SendPropertyChanging();
				this._boughtsold_level = value;
				this.SendPropertyChanged("boughtsold_level");
				this.Onboughtsold_levelChanged();
			}
		}
	}
	
	[Column(Storage="_inactive", DbType="TinyInt NOT NULL")]
	[DataMember(Order=5)]
	public byte inactive
	{
		get
		{
			return this._inactive;
		}
		set
		{
			if ((this._inactive != value))
			{
				this.OninactiveChanging(value);
				this.SendPropertyChanging();
				this._inactive = value;
				this.SendPropertyChanged("inactive");
				this.OninactiveChanged();
			}
		}
	}
	
	[Column(Storage="_lastmodified", DbType="DateTime NOT NULL")]
	[DataMember(Order=6)]
	public System.DateTime lastmodified
	{
		get
		{
			return this._lastmodified;
		}
		set
		{
			if ((this._lastmodified != value))
			{
				this.OnlastmodifiedChanging(value);
				this.SendPropertyChanging();
				this._lastmodified = value;
				this.SendPropertyChanged("lastmodified");
				this.OnlastmodifiedChanged();
			}
		}
	}
	
	[Column(Storage="_err_no")]
	[DataMember(Order=7)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", CanBeNull=false)]
	[DataMember(Order=8)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.fxerrors")]
[DataContract()]
public partial class fxerror : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _err_no;
	
	private string _err_desc;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public fxerror()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_err_no", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", DbType="NVarChar(255)")]
	[DataMember(Order=3)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.vFX_EventAliases")]
[DataContract()]
public partial class fxevent_alias : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _eventid;
	
	private string _name;
	
	private int _err_no;
	
	private string _err_desc;
	
	private EntityRef<fxevent> _fxevent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OneventidChanging(string value);
    partial void OneventidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public fxevent_alias()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				if (this._fxevent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OneventidChanging(value);
				this.SendPropertyChanging();
				this._eventid = value;
				this.SendPropertyChanged("eventid");
				this.OneventidChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=3)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_err_no")]
	[DataMember(Order=4)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", CanBeNull=false)]
	[DataMember(Order=5)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	[Association(Name="fxevent_fxevent_alias", Storage="_fxevent", ThisKey="eventid", OtherKey="eventid", IsForeignKey=true)]
	public fxevent fxevent
	{
		get
		{
			return this._fxevent.Entity;
		}
		set
		{
			fxevent previousValue = this._fxevent.Entity;
			if (((previousValue != value) 
						|| (this._fxevent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._fxevent.Entity = null;
					previousValue.fxevent_alias.Remove(this);
				}
				this._fxevent.Entity = value;
				if ((value != null))
				{
					value.fxevent_alias.Add(this);
					this._eventid = value.eventid;
				}
				else
				{
					this._eventid = default(string);
				}
				this.SendPropertyChanged("fxevent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._fxevent = default(EntityRef<fxevent>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.vFX_EventIndicators")]
[DataContract()]
public partial class fxevent_association : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _eventid;
	
	private string _ind_id;
	
	private int _ind_order;
	
	private short _ind_importance;
	
	private System.Nullable<decimal> _ind_positive_threshhold;
	
	private System.Nullable<short> _ind_positive_threshhold_weight;
	
	private System.Nullable<decimal> _ind_negative_threshhold;
	
	private System.Nullable<short> _ind_negative_threshhold_weight;
	
	private int _err_no;
	
	private string _err_desc;
	
	private EntityRef<fxevent> _fxevent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OneventidChanging(string value);
    partial void OneventidChanged();
    partial void Onind_idChanging(string value);
    partial void Onind_idChanged();
    partial void Onind_orderChanging(int value);
    partial void Onind_orderChanged();
    partial void Onind_importanceChanging(short value);
    partial void Onind_importanceChanged();
    partial void Onind_positive_threshholdChanging(System.Nullable<decimal> value);
    partial void Onind_positive_threshholdChanged();
    partial void Onind_positive_threshhold_weightChanging(System.Nullable<short> value);
    partial void Onind_positive_threshhold_weightChanged();
    partial void Onind_negative_threshholdChanging(System.Nullable<decimal> value);
    partial void Onind_negative_threshholdChanged();
    partial void Onind_negative_threshhold_weightChanging(System.Nullable<short> value);
    partial void Onind_negative_threshhold_weightChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public fxevent_association()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				if (this._fxevent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OneventidChanging(value);
				this.SendPropertyChanging();
				this._eventid = value;
				this.SendPropertyChanged("eventid");
				this.OneventidChanged();
			}
		}
	}
	
	[Column(Storage="_ind_id", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public string ind_id
	{
		get
		{
			return this._ind_id;
		}
		set
		{
			if ((this._ind_id != value))
			{
				this.Onind_idChanging(value);
				this.SendPropertyChanging();
				this._ind_id = value;
				this.SendPropertyChanged("ind_id");
				this.Onind_idChanged();
			}
		}
	}
	
	[Column(Storage="_ind_order", DbType="Int NOT NULL")]
	[DataMember(Order=4)]
	public int ind_order
	{
		get
		{
			return this._ind_order;
		}
		set
		{
			if ((this._ind_order != value))
			{
				this.Onind_orderChanging(value);
				this.SendPropertyChanging();
				this._ind_order = value;
				this.SendPropertyChanged("ind_order");
				this.Onind_orderChanged();
			}
		}
	}
	
	[Column(Storage="_ind_importance", DbType="SmallInt NOT NULL")]
	[DataMember(Order=5)]
	public short ind_importance
	{
		get
		{
			return this._ind_importance;
		}
		set
		{
			if ((this._ind_importance != value))
			{
				this.Onind_importanceChanging(value);
				this.SendPropertyChanging();
				this._ind_importance = value;
				this.SendPropertyChanged("ind_importance");
				this.Onind_importanceChanged();
			}
		}
	}
	
	[Column(Storage="_ind_positive_threshhold", DbType="Decimal(19,5)")]
	[DataMember(Order=6)]
	public System.Nullable<decimal> ind_positive_threshhold
	{
		get
		{
			return this._ind_positive_threshhold;
		}
		set
		{
			if ((this._ind_positive_threshhold != value))
			{
				this.Onind_positive_threshholdChanging(value);
				this.SendPropertyChanging();
				this._ind_positive_threshhold = value;
				this.SendPropertyChanged("ind_positive_threshhold");
				this.Onind_positive_threshholdChanged();
			}
		}
	}
	
	[Column(Storage="_ind_positive_threshhold_weight", DbType="SmallInt")]
	[DataMember(Order=7)]
	public System.Nullable<short> ind_positive_threshhold_weight
	{
		get
		{
			return this._ind_positive_threshhold_weight;
		}
		set
		{
			if ((this._ind_positive_threshhold_weight != value))
			{
				this.Onind_positive_threshhold_weightChanging(value);
				this.SendPropertyChanging();
				this._ind_positive_threshhold_weight = value;
				this.SendPropertyChanged("ind_positive_threshhold_weight");
				this.Onind_positive_threshhold_weightChanged();
			}
		}
	}
	
	[Column(Storage="_ind_negative_threshhold", DbType="Decimal(19,5)")]
	[DataMember(Order=8)]
	public System.Nullable<decimal> ind_negative_threshhold
	{
		get
		{
			return this._ind_negative_threshhold;
		}
		set
		{
			if ((this._ind_negative_threshhold != value))
			{
				this.Onind_negative_threshholdChanging(value);
				this.SendPropertyChanging();
				this._ind_negative_threshhold = value;
				this.SendPropertyChanged("ind_negative_threshhold");
				this.Onind_negative_threshholdChanged();
			}
		}
	}
	
	[Column(Storage="_ind_negative_threshhold_weight", DbType="SmallInt")]
	[DataMember(Order=9)]
	public System.Nullable<short> ind_negative_threshhold_weight
	{
		get
		{
			return this._ind_negative_threshhold_weight;
		}
		set
		{
			if ((this._ind_negative_threshhold_weight != value))
			{
				this.Onind_negative_threshhold_weightChanging(value);
				this.SendPropertyChanging();
				this._ind_negative_threshhold_weight = value;
				this.SendPropertyChanged("ind_negative_threshhold_weight");
				this.Onind_negative_threshhold_weightChanged();
			}
		}
	}
	
	[Column(Storage="_err_no")]
	[DataMember(Order=10)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", CanBeNull=false)]
	[DataMember(Order=11)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	[Association(Name="fxevent_fxevent_association", Storage="_fxevent", ThisKey="eventid", OtherKey="eventid", IsForeignKey=true)]
	public fxevent fxevent
	{
		get
		{
			return this._fxevent.Entity;
		}
		set
		{
			fxevent previousValue = this._fxevent.Entity;
			if (((previousValue != value) 
						|| (this._fxevent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._fxevent.Entity = null;
					previousValue.fxevent_associations.Remove(this);
				}
				this._fxevent.Entity = value;
				if ((value != null))
				{
					value.fxevent_associations.Add(this);
					this._eventid = value.eventid;
				}
				else
				{
					this._eventid = default(string);
				}
				this.SendPropertyChanged("fxevent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._fxevent = default(EntityRef<fxevent>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.vFX_EventCurrencyPairs")]
[DataContract()]
public partial class fxevent_currencypair : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _eventid;
	
	private int _cp_id;
	
	private string _base;
	
	private string _quote;
	
	private int _err_no;
	
	private string _err_desc;
	
	private EntityRef<fxevent> _fxevent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OneventidChanging(string value);
    partial void OneventidChanged();
    partial void Oncp_idChanging(int value);
    partial void Oncp_idChanged();
    partial void OnbaseChanging(string value);
    partial void OnbaseChanged();
    partial void OnquoteChanging(string value);
    partial void OnquoteChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public fxevent_currencypair()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				if (this._fxevent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OneventidChanging(value);
				this.SendPropertyChanging();
				this._eventid = value;
				this.SendPropertyChanged("eventid");
				this.OneventidChanged();
			}
		}
	}
	
	[Column(Storage="_cp_id", DbType="Int NOT NULL")]
	[DataMember(Order=3)]
	public int cp_id
	{
		get
		{
			return this._cp_id;
		}
		set
		{
			if ((this._cp_id != value))
			{
				this.Oncp_idChanging(value);
				this.SendPropertyChanging();
				this._cp_id = value;
				this.SendPropertyChanged("cp_id");
				this.Oncp_idChanged();
			}
		}
	}
	
	[Column(Name="base", Storage="_base", DbType="NChar(3)")]
	[DataMember(Order=4)]
	public string @base
	{
		get
		{
			return this._base;
		}
		set
		{
			if ((this._base != value))
			{
				this.OnbaseChanging(value);
				this.SendPropertyChanging();
				this._base = value;
				this.SendPropertyChanged("@base");
				this.OnbaseChanged();
			}
		}
	}
	
	[Column(Storage="_quote", DbType="NChar(3)")]
	[DataMember(Order=5)]
	public string quote
	{
		get
		{
			return this._quote;
		}
		set
		{
			if ((this._quote != value))
			{
				this.OnquoteChanging(value);
				this.SendPropertyChanging();
				this._quote = value;
				this.SendPropertyChanged("quote");
				this.OnquoteChanged();
			}
		}
	}
	
	[Column(Storage="_err_no")]
	[DataMember(Order=6)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", CanBeNull=false)]
	[DataMember(Order=7)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	[Association(Name="fxevent_fxevent_currencypair", Storage="_fxevent", ThisKey="eventid", OtherKey="eventid", IsForeignKey=true)]
	public fxevent fxevent
	{
		get
		{
			return this._fxevent.Entity;
		}
		set
		{
			fxevent previousValue = this._fxevent.Entity;
			if (((previousValue != value) 
						|| (this._fxevent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._fxevent.Entity = null;
					previousValue.fxevent_currencypairs.Remove(this);
				}
				this._fxevent.Entity = value;
				if ((value != null))
				{
					value.fxevent_currencypairs.Add(this);
					this._eventid = value.eventid;
				}
				else
				{
					this._eventid = default(string);
				}
				this.SendPropertyChanged("fxevent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._fxevent = default(EntityRef<fxevent>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.vFX_EventTransactions")]
[DataContract()]
public partial class fxevent_transaction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _eventid;
	
	private string _name;
	
	private System.DateTime _eventdate;
	
	private System.TimeSpan _eventtime;
	
	private short _importance;
	
	private System.Nullable<decimal> _previous;
	
	private System.Nullable<decimal> _forecast;
	
	private System.Nullable<decimal> _actual;
	
	private string _currency;
	
	private int _err_no;
	
	private string _err_desc;
	
	private EntityRef<fxevent> _fxevent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OneventidChanging(string value);
    partial void OneventidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OneventdateChanging(System.DateTime value);
    partial void OneventdateChanged();
    partial void OneventtimeChanging(System.TimeSpan value);
    partial void OneventtimeChanged();
    partial void OnimportanceChanging(short value);
    partial void OnimportanceChanged();
    partial void OnpreviousChanging(System.Nullable<decimal> value);
    partial void OnpreviousChanged();
    partial void OnforecastChanging(System.Nullable<decimal> value);
    partial void OnforecastChanged();
    partial void OnactualChanging(System.Nullable<decimal> value);
    partial void OnactualChanged();
    partial void OncurrencyChanging(string value);
    partial void OncurrencyChanged();
    partial void Onerr_noChanging(int value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public fxevent_transaction()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				if (this._fxevent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OneventidChanging(value);
				this.SendPropertyChanging();
				this._eventid = value;
				this.SendPropertyChanged("eventid");
				this.OneventidChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=3)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_eventdate", DbType="Date NOT NULL")]
	[DataMember(Order=4)]
	public System.DateTime eventdate
	{
		get
		{
			return this._eventdate;
		}
		set
		{
			if ((this._eventdate != value))
			{
				this.OneventdateChanging(value);
				this.SendPropertyChanging();
				this._eventdate = value;
				this.SendPropertyChanged("eventdate");
				this.OneventdateChanged();
			}
		}
	}
	
	[Column(Storage="_eventtime", DbType="Time NOT NULL")]
	[DataMember(Order=5)]
	public System.TimeSpan eventtime
	{
		get
		{
			return this._eventtime;
		}
		set
		{
			if ((this._eventtime != value))
			{
				this.OneventtimeChanging(value);
				this.SendPropertyChanging();
				this._eventtime = value;
				this.SendPropertyChanged("eventtime");
				this.OneventtimeChanged();
			}
		}
	}
	
	[Column(Storage="_importance", DbType="SmallInt NOT NULL")]
	[DataMember(Order=6)]
	public short importance
	{
		get
		{
			return this._importance;
		}
		set
		{
			if ((this._importance != value))
			{
				this.OnimportanceChanging(value);
				this.SendPropertyChanging();
				this._importance = value;
				this.SendPropertyChanged("importance");
				this.OnimportanceChanged();
			}
		}
	}
	
	[Column(Storage="_previous", DbType="Decimal(19,5)")]
	[DataMember(Order=7)]
	public System.Nullable<decimal> previous
	{
		get
		{
			return this._previous;
		}
		set
		{
			if ((this._previous != value))
			{
				this.OnpreviousChanging(value);
				this.SendPropertyChanging();
				this._previous = value;
				this.SendPropertyChanged("previous");
				this.OnpreviousChanged();
			}
		}
	}
	
	[Column(Storage="_forecast", DbType="Decimal(19,5)")]
	[DataMember(Order=8)]
	public System.Nullable<decimal> forecast
	{
		get
		{
			return this._forecast;
		}
		set
		{
			if ((this._forecast != value))
			{
				this.OnforecastChanging(value);
				this.SendPropertyChanging();
				this._forecast = value;
				this.SendPropertyChanged("forecast");
				this.OnforecastChanged();
			}
		}
	}
	
	[Column(Storage="_actual", DbType="Decimal(19,5)")]
	[DataMember(Order=9)]
	public System.Nullable<decimal> actual
	{
		get
		{
			return this._actual;
		}
		set
		{
			if ((this._actual != value))
			{
				this.OnactualChanging(value);
				this.SendPropertyChanging();
				this._actual = value;
				this.SendPropertyChanged("actual");
				this.OnactualChanged();
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3)")]
	[DataMember(Order=10)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this.OncurrencyChanging(value);
				this.SendPropertyChanging();
				this._currency = value;
				this.SendPropertyChanged("currency");
				this.OncurrencyChanged();
			}
		}
	}
	
	[Column(Storage="_err_no")]
	[DataMember(Order=11)]
	public int err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", CanBeNull=false)]
	[DataMember(Order=12)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	[Association(Name="fxevent_fxevent_transaction", Storage="_fxevent", ThisKey="eventid", OtherKey="eventid", IsForeignKey=true)]
	public fxevent fxevent
	{
		get
		{
			return this._fxevent.Entity;
		}
		set
		{
			fxevent previousValue = this._fxevent.Entity;
			if (((previousValue != value) 
						|| (this._fxevent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._fxevent.Entity = null;
					previousValue.fxevent_transactions.Remove(this);
				}
				this._fxevent.Entity = value;
				if ((value != null))
				{
					value.fxevent_transactions.Add(this);
					this._eventid = value.eventid;
				}
				else
				{
					this._eventid = default(string);
				}
				this.SendPropertyChanged("fxevent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._fxevent = default(EntityRef<fxevent>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.vFX_Events")]
[DataContract()]
public partial class fxevent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _eventid;
	
	private string _name;
	
	private byte _recurring;
	
	private System.DateTime _next_date;
	
	private System.TimeSpan _next_time;
	
	private short _importance;
	
	private System.Nullable<decimal> _previous;
	
	private byte _watch;
	
	private string _currency;
	
	private System.Nullable<int> _err_no;
	
	private string _err_desc;
	
	private EntitySet<fxevent_alias> _fxevent_alias;
	
	private EntitySet<fxevent_association> _fxevent_associations;
	
	private EntitySet<fxevent_currencypair> _fxevent_currencypairs;
	
	private EntitySet<fxevent_transaction> _fxevent_transactions;
	
	private bool serializing;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OneventidChanging(string value);
    partial void OneventidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnrecurringChanging(byte value);
    partial void OnrecurringChanged();
    partial void Onnext_dateChanging(System.DateTime value);
    partial void Onnext_dateChanged();
    partial void Onnext_timeChanging(System.TimeSpan value);
    partial void Onnext_timeChanged();
    partial void OnimportanceChanging(short value);
    partial void OnimportanceChanged();
    partial void OnpreviousChanging(System.Nullable<decimal> value);
    partial void OnpreviousChanged();
    partial void OnwatchChanging(byte value);
    partial void OnwatchChanged();
    partial void OncurrencyChanging(string value);
    partial void OncurrencyChanged();
    partial void Onerr_noChanging(System.Nullable<int> value);
    partial void Onerr_noChanged();
    partial void Onerr_descChanging(string value);
    partial void Onerr_descChanged();
    #endregion
	
	public fxevent()
	{
		this.Initialize();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this.OneventidChanging(value);
				this.SendPropertyChanging();
				this._eventid = value;
				this.SendPropertyChanged("eventid");
				this.OneventidChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=3)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_recurring", DbType="TinyInt NOT NULL")]
	[DataMember(Order=4)]
	public byte recurring
	{
		get
		{
			return this._recurring;
		}
		set
		{
			if ((this._recurring != value))
			{
				this.OnrecurringChanging(value);
				this.SendPropertyChanging();
				this._recurring = value;
				this.SendPropertyChanged("recurring");
				this.OnrecurringChanged();
			}
		}
	}
	
	[Column(Storage="_next_date", DbType="Date NOT NULL")]
	[DataMember(Order=5)]
	public System.DateTime next_date
	{
		get
		{
			return this._next_date;
		}
		set
		{
			if ((this._next_date != value))
			{
				this.Onnext_dateChanging(value);
				this.SendPropertyChanging();
				this._next_date = value;
				this.SendPropertyChanged("next_date");
				this.Onnext_dateChanged();
			}
		}
	}
	
	[Column(Storage="_next_time", DbType="Time NOT NULL")]
	[DataMember(Order=6)]
	public System.TimeSpan next_time
	{
		get
		{
			return this._next_time;
		}
		set
		{
			if ((this._next_time != value))
			{
				this.Onnext_timeChanging(value);
				this.SendPropertyChanging();
				this._next_time = value;
				this.SendPropertyChanged("next_time");
				this.Onnext_timeChanged();
			}
		}
	}
	
	[Column(Storage="_importance", DbType="SmallInt NOT NULL")]
	[DataMember(Order=7)]
	public short importance
	{
		get
		{
			return this._importance;
		}
		set
		{
			if ((this._importance != value))
			{
				this.OnimportanceChanging(value);
				this.SendPropertyChanging();
				this._importance = value;
				this.SendPropertyChanged("importance");
				this.OnimportanceChanged();
			}
		}
	}
	
	[Column(Storage="_previous", DbType="Decimal(19,5)")]
	[DataMember(Order=8)]
	public System.Nullable<decimal> previous
	{
		get
		{
			return this._previous;
		}
		set
		{
			if ((this._previous != value))
			{
				this.OnpreviousChanging(value);
				this.SendPropertyChanging();
				this._previous = value;
				this.SendPropertyChanged("previous");
				this.OnpreviousChanged();
			}
		}
	}
	
	[Column(Storage="_watch", DbType="TinyInt NOT NULL")]
	[DataMember(Order=9)]
	public byte watch
	{
		get
		{
			return this._watch;
		}
		set
		{
			if ((this._watch != value))
			{
				this.OnwatchChanging(value);
				this.SendPropertyChanging();
				this._watch = value;
				this.SendPropertyChanged("watch");
				this.OnwatchChanged();
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3)")]
	[DataMember(Order=10)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this.OncurrencyChanging(value);
				this.SendPropertyChanging();
				this._currency = value;
				this.SendPropertyChanged("currency");
				this.OncurrencyChanged();
			}
		}
	}
	
	[Column(Storage="_err_no", DbType="Int")]
	[DataMember(Order=11)]
	public System.Nullable<int> err_no
	{
		get
		{
			return this._err_no;
		}
		set
		{
			if ((this._err_no != value))
			{
				this.Onerr_noChanging(value);
				this.SendPropertyChanging();
				this._err_no = value;
				this.SendPropertyChanged("err_no");
				this.Onerr_noChanged();
			}
		}
	}
	
	[Column(Storage="_err_desc", DbType="nvarchar(255)")]
	[DataMember(Order=12)]
	public string err_desc
	{
		get
		{
			return this._err_desc;
		}
		set
		{
			if ((this._err_desc != value))
			{
				this.Onerr_descChanging(value);
				this.SendPropertyChanging();
				this._err_desc = value;
				this.SendPropertyChanged("err_desc");
				this.Onerr_descChanged();
			}
		}
	}
	
	[Association(Name="fxevent_fxevent_alias", Storage="_fxevent_alias", ThisKey="eventid", OtherKey="eventid")]
	[DataMember(Order=13, EmitDefaultValue=false)]
	public EntitySet<fxevent_alias> fxevent_alias
	{
		get
		{
			if ((this.serializing 
						&& (this._fxevent_alias.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._fxevent_alias;
		}
		set
		{
			this._fxevent_alias.Assign(value);
		}
	}
	
	[Association(Name="fxevent_fxevent_association", Storage="_fxevent_associations", ThisKey="eventid", OtherKey="eventid")]
	[DataMember(Order=14, EmitDefaultValue=false)]
	public EntitySet<fxevent_association> fxevent_associations
	{
		get
		{
			if ((this.serializing 
						&& (this._fxevent_associations.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._fxevent_associations;
		}
		set
		{
			this._fxevent_associations.Assign(value);
		}
	}
	
	[Association(Name="fxevent_fxevent_currencypair", Storage="_fxevent_currencypairs", ThisKey="eventid", OtherKey="eventid")]
	[DataMember(Order=15, EmitDefaultValue=false)]
	public EntitySet<fxevent_currencypair> fxevent_currencypairs
	{
		get
		{
			if ((this.serializing 
						&& (this._fxevent_currencypairs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._fxevent_currencypairs;
		}
		set
		{
			this._fxevent_currencypairs.Assign(value);
		}
	}
	
	[Association(Name="fxevent_fxevent_transaction", Storage="_fxevent_transactions", ThisKey="eventid", OtherKey="eventid")]
	[DataMember(Order=16, EmitDefaultValue=false)]
	public EntitySet<fxevent_transaction> fxevent_transactions
	{
		get
		{
			if ((this.serializing 
						&& (this._fxevent_transactions.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._fxevent_transactions;
		}
		set
		{
			this._fxevent_transactions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_fxevent_alias(fxevent_alias entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = this;
	}
	
	private void detach_fxevent_alias(fxevent_alias entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = null;
	}
	
	private void attach_fxevent_associations(fxevent_association entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = this;
	}
	
	private void detach_fxevent_associations(fxevent_association entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = null;
	}
	
	private void attach_fxevent_currencypairs(fxevent_currencypair entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = this;
	}
	
	private void detach_fxevent_currencypairs(fxevent_currencypair entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = null;
	}
	
	private void attach_fxevent_transactions(fxevent_transaction entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = this;
	}
	
	private void detach_fxevent_transactions(fxevent_transaction entity)
	{
		this.SendPropertyChanging();
		entity.fxevent = null;
	}
	
	private void Initialize()
	{
		this._fxevent_alias = new EntitySet<fxevent_alias>(new Action<fxevent_alias>(this.attach_fxevent_alias), new Action<fxevent_alias>(this.detach_fxevent_alias));
		this._fxevent_associations = new EntitySet<fxevent_association>(new Action<fxevent_association>(this.attach_fxevent_associations), new Action<fxevent_association>(this.detach_fxevent_associations));
		this._fxevent_currencypairs = new EntitySet<fxevent_currencypair>(new Action<fxevent_currencypair>(this.attach_fxevent_currencypairs), new Action<fxevent_currencypair>(this.detach_fxevent_currencypairs));
		this._fxevent_transactions = new EntitySet<fxevent_transaction>(new Action<fxevent_transaction>(this.attach_fxevent_transactions), new Action<fxevent_transaction>(this.detach_fxevent_transactions));
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
	
	[OnSerializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerializing(StreamingContext context)
	{
		this.serializing = true;
	}
	
	[OnSerialized()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerialized(StreamingContext context)
	{
		this.serializing = false;
	}
}

[DataContract()]
public partial class spFX_GetEventTransactionsResult
{
	
	private string _eventid;
	
	private string _name;
	
	private System.DateTime _eventdate;
	
	private System.TimeSpan _eventtime;
	
	private System.Nullable<decimal> _previous;
	
	private System.Nullable<decimal> _forecast;
	
	private System.Nullable<decimal> _actual;
	
	private string _currency;
	
	public spFX_GetEventTransactionsResult()
	{
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=1)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this._eventid = value;
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=2)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this._name = value;
			}
		}
	}
	
	[Column(Storage="_eventdate", DbType="Date NOT NULL")]
	[DataMember(Order=3)]
	public System.DateTime eventdate
	{
		get
		{
			return this._eventdate;
		}
		set
		{
			if ((this._eventdate != value))
			{
				this._eventdate = value;
			}
		}
	}
	
	[Column(Storage="_eventtime", DbType="Time NOT NULL")]
	[DataMember(Order=4)]
	public System.TimeSpan eventtime
	{
		get
		{
			return this._eventtime;
		}
		set
		{
			if ((this._eventtime != value))
			{
				this._eventtime = value;
			}
		}
	}
	
	[Column(Storage="_previous", DbType="Decimal(0,0)")]
	[DataMember(Order=5)]
	public System.Nullable<decimal> previous
	{
		get
		{
			return this._previous;
		}
		set
		{
			if ((this._previous != value))
			{
				this._previous = value;
			}
		}
	}
	
	[Column(Storage="_forecast", DbType="Decimal(0,0)")]
	[DataMember(Order=6)]
	public System.Nullable<decimal> forecast
	{
		get
		{
			return this._forecast;
		}
		set
		{
			if ((this._forecast != value))
			{
				this._forecast = value;
			}
		}
	}
	
	[Column(Storage="_actual", DbType="Decimal(0,0)")]
	[DataMember(Order=7)]
	public System.Nullable<decimal> actual
	{
		get
		{
			return this._actual;
		}
		set
		{
			if ((this._actual != value))
			{
				this._actual = value;
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3)")]
	[DataMember(Order=8)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this._currency = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetCurrencyResult
{
	
	private int _id;
	
	private string _currency;
	
	private string _name;
	
	private System.DateTime _lastmodified;
	
	public spFX_GetCurrencyResult()
	{
	}
	
	[Column(Storage="_id", DbType="Int NOT NULL")]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this._id = value;
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3) NOT NULL", CanBeNull=false)]
	[DataMember(Order=2)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this._currency = value;
			}
		}
	}
	
	[Column(Storage="_name", DbType="NChar(50)")]
	[DataMember(Order=3)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this._name = value;
			}
		}
	}
	
	[Column(Storage="_lastmodified", DbType="DateTime2 NOT NULL")]
	[DataMember(Order=4)]
	public System.DateTime lastmodified
	{
		get
		{
			return this._lastmodified;
		}
		set
		{
			if ((this._lastmodified != value))
			{
				this._lastmodified = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetCurrencyPairResult
{
	
	private int _id;
	
	private string _base;
	
	private string _quote;
	
	private decimal _boughtsold_level;
	
	private byte _inactive;
	
	public spFX_GetCurrencyPairResult()
	{
	}
	
	[Column(Storage="_id", DbType="Int NOT NULL")]
	[DataMember(Order=1)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this._id = value;
			}
		}
	}
	
	[Column(Name="base", Storage="_base", DbType="NChar(3) NOT NULL", CanBeNull=false)]
	[DataMember(Order=2)]
	public string @base
	{
		get
		{
			return this._base;
		}
		set
		{
			if ((this._base != value))
			{
				this._base = value;
			}
		}
	}
	
	[Column(Storage="_quote", DbType="NChar(3) NOT NULL", CanBeNull=false)]
	[DataMember(Order=3)]
	public string quote
	{
		get
		{
			return this._quote;
		}
		set
		{
			if ((this._quote != value))
			{
				this._quote = value;
			}
		}
	}
	
	[Column(Storage="_boughtsold_level", DbType="Decimal(0,0) NOT NULL")]
	[DataMember(Order=4)]
	public decimal boughtsold_level
	{
		get
		{
			return this._boughtsold_level;
		}
		set
		{
			if ((this._boughtsold_level != value))
			{
				this._boughtsold_level = value;
			}
		}
	}
	
	[Column(Storage="_inactive", DbType="TinyInt NOT NULL")]
	[DataMember(Order=5)]
	public byte inactive
	{
		get
		{
			return this._inactive;
		}
		set
		{
			if ((this._inactive != value))
			{
				this._inactive = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetEventResult
{
	
	private string _eventid;
	
	private string _name;
	
	private byte _recurring;
	
	private System.DateTime _next_date;
	
	private System.TimeSpan _next_time;
	
	private short _importance;
	
	private System.Nullable<decimal> _previous;
	
	private byte _watch;
	
	private string _currency;
	
	public spFX_GetEventResult()
	{
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=1)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this._eventid = value;
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=2)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this._name = value;
			}
		}
	}
	
	[Column(Storage="_recurring", DbType="TinyInt NOT NULL")]
	[DataMember(Order=3)]
	public byte recurring
	{
		get
		{
			return this._recurring;
		}
		set
		{
			if ((this._recurring != value))
			{
				this._recurring = value;
			}
		}
	}
	
	[Column(Storage="_next_date", DbType="Date NOT NULL")]
	[DataMember(Order=4)]
	public System.DateTime next_date
	{
		get
		{
			return this._next_date;
		}
		set
		{
			if ((this._next_date != value))
			{
				this._next_date = value;
			}
		}
	}
	
	[Column(Storage="_next_time", DbType="Time NOT NULL")]
	[DataMember(Order=5)]
	public System.TimeSpan next_time
	{
		get
		{
			return this._next_time;
		}
		set
		{
			if ((this._next_time != value))
			{
				this._next_time = value;
			}
		}
	}
	
	[Column(Storage="_importance", DbType="SmallInt NOT NULL")]
	[DataMember(Order=6)]
	public short importance
	{
		get
		{
			return this._importance;
		}
		set
		{
			if ((this._importance != value))
			{
				this._importance = value;
			}
		}
	}
	
	[Column(Storage="_previous", DbType="Decimal(0,0)")]
	[DataMember(Order=7)]
	public System.Nullable<decimal> previous
	{
		get
		{
			return this._previous;
		}
		set
		{
			if ((this._previous != value))
			{
				this._previous = value;
			}
		}
	}
	
	[Column(Storage="_watch", DbType="TinyInt NOT NULL")]
	[DataMember(Order=8)]
	public byte watch
	{
		get
		{
			return this._watch;
		}
		set
		{
			if ((this._watch != value))
			{
				this._watch = value;
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3)")]
	[DataMember(Order=9)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this._currency = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetEventAliasesResult
{
	
	private string _eventid;
	
	private string _event_name;
	
	private string _alias_name;
	
	public spFX_GetEventAliasesResult()
	{
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=1)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this._eventid = value;
			}
		}
	}
	
	[Column(Storage="_event_name", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string event_name
	{
		get
		{
			return this._event_name;
		}
		set
		{
			if ((this._event_name != value))
			{
				this._event_name = value;
			}
		}
	}
	
	[Column(Storage="_alias_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=3)]
	public string alias_name
	{
		get
		{
			return this._alias_name;
		}
		set
		{
			if ((this._alias_name != value))
			{
				this._alias_name = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetEventCurrencyPairsResult
{
	
	private string _eventid;
	
	private string _name;
	
	private string _base;
	
	private string _quote;
	
	private System.Nullable<decimal> _boughtsold_level;
	
	private System.Nullable<byte> _inactive;
	
	public spFX_GetEventCurrencyPairsResult()
	{
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=1)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this._eventid = value;
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this._name = value;
			}
		}
	}
	
	[Column(Name="base", Storage="_base", DbType="NChar(3)")]
	[DataMember(Order=3)]
	public string @base
	{
		get
		{
			return this._base;
		}
		set
		{
			if ((this._base != value))
			{
				this._base = value;
			}
		}
	}
	
	[Column(Storage="_quote", DbType="NChar(3)")]
	[DataMember(Order=4)]
	public string quote
	{
		get
		{
			return this._quote;
		}
		set
		{
			if ((this._quote != value))
			{
				this._quote = value;
			}
		}
	}
	
	[Column(Storage="_boughtsold_level", DbType="Decimal(0,0)")]
	[DataMember(Order=5)]
	public System.Nullable<decimal> boughtsold_level
	{
		get
		{
			return this._boughtsold_level;
		}
		set
		{
			if ((this._boughtsold_level != value))
			{
				this._boughtsold_level = value;
			}
		}
	}
	
	[Column(Storage="_inactive", DbType="TinyInt")]
	[DataMember(Order=6)]
	public System.Nullable<byte> inactive
	{
		get
		{
			return this._inactive;
		}
		set
		{
			if ((this._inactive != value))
			{
				this._inactive = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetEventIndicatorsResult
{
	
	private string _ind_id;
	
	private string _ind_name;
	
	private string _currency;
	
	private System.Nullable<short> _importance;
	
	private System.Nullable<System.DateTime> _next_date;
	
	private System.Nullable<System.TimeSpan> _next_time;
	
	private System.Nullable<decimal> _previous;
	
	private System.Nullable<byte> _recurring;
	
	private int _ind_order;
	
	private short _ind_importance;
	
	private System.Nullable<decimal> _ind_positive_threshhold;
	
	private System.Nullable<short> _ind_positive_threshhold_weight;
	
	private System.Nullable<decimal> _ind_negative_threshhold;
	
	private System.Nullable<short> _ind_negative_threshhold_weight;
	
	private string _eventid;
	
	private string _event_name;
	
	public spFX_GetEventIndicatorsResult()
	{
	}
	
	[Column(Storage="_ind_id", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=1)]
	public string ind_id
	{
		get
		{
			return this._ind_id;
		}
		set
		{
			if ((this._ind_id != value))
			{
				this._ind_id = value;
			}
		}
	}
	
	[Column(Storage="_ind_name", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string ind_name
	{
		get
		{
			return this._ind_name;
		}
		set
		{
			if ((this._ind_name != value))
			{
				this._ind_name = value;
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3)")]
	[DataMember(Order=3)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this._currency = value;
			}
		}
	}
	
	[Column(Storage="_importance", DbType="SmallInt")]
	[DataMember(Order=4)]
	public System.Nullable<short> importance
	{
		get
		{
			return this._importance;
		}
		set
		{
			if ((this._importance != value))
			{
				this._importance = value;
			}
		}
	}
	
	[Column(Storage="_next_date", DbType="Date")]
	[DataMember(Order=5)]
	public System.Nullable<System.DateTime> next_date
	{
		get
		{
			return this._next_date;
		}
		set
		{
			if ((this._next_date != value))
			{
				this._next_date = value;
			}
		}
	}
	
	[Column(Storage="_next_time", DbType="Time")]
	[DataMember(Order=6)]
	public System.Nullable<System.TimeSpan> next_time
	{
		get
		{
			return this._next_time;
		}
		set
		{
			if ((this._next_time != value))
			{
				this._next_time = value;
			}
		}
	}
	
	[Column(Storage="_previous", DbType="Decimal(0,0)")]
	[DataMember(Order=7)]
	public System.Nullable<decimal> previous
	{
		get
		{
			return this._previous;
		}
		set
		{
			if ((this._previous != value))
			{
				this._previous = value;
			}
		}
	}
	
	[Column(Storage="_recurring", DbType="TinyInt")]
	[DataMember(Order=8)]
	public System.Nullable<byte> recurring
	{
		get
		{
			return this._recurring;
		}
		set
		{
			if ((this._recurring != value))
			{
				this._recurring = value;
			}
		}
	}
	
	[Column(Storage="_ind_order", DbType="Int NOT NULL")]
	[DataMember(Order=9)]
	public int ind_order
	{
		get
		{
			return this._ind_order;
		}
		set
		{
			if ((this._ind_order != value))
			{
				this._ind_order = value;
			}
		}
	}
	
	[Column(Storage="_ind_importance", DbType="SmallInt NOT NULL")]
	[DataMember(Order=10)]
	public short ind_importance
	{
		get
		{
			return this._ind_importance;
		}
		set
		{
			if ((this._ind_importance != value))
			{
				this._ind_importance = value;
			}
		}
	}
	
	[Column(Storage="_ind_positive_threshhold", DbType="Decimal(0,0)")]
	[DataMember(Order=11)]
	public System.Nullable<decimal> ind_positive_threshhold
	{
		get
		{
			return this._ind_positive_threshhold;
		}
		set
		{
			if ((this._ind_positive_threshhold != value))
			{
				this._ind_positive_threshhold = value;
			}
		}
	}
	
	[Column(Storage="_ind_positive_threshhold_weight", DbType="SmallInt")]
	[DataMember(Order=12)]
	public System.Nullable<short> ind_positive_threshhold_weight
	{
		get
		{
			return this._ind_positive_threshhold_weight;
		}
		set
		{
			if ((this._ind_positive_threshhold_weight != value))
			{
				this._ind_positive_threshhold_weight = value;
			}
		}
	}
	
	[Column(Storage="_ind_negative_threshhold", DbType="Decimal(0,0)")]
	[DataMember(Order=13)]
	public System.Nullable<decimal> ind_negative_threshhold
	{
		get
		{
			return this._ind_negative_threshhold;
		}
		set
		{
			if ((this._ind_negative_threshhold != value))
			{
				this._ind_negative_threshhold = value;
			}
		}
	}
	
	[Column(Storage="_ind_negative_threshhold_weight", DbType="SmallInt")]
	[DataMember(Order=14)]
	public System.Nullable<short> ind_negative_threshhold_weight
	{
		get
		{
			return this._ind_negative_threshhold_weight;
		}
		set
		{
			if ((this._ind_negative_threshhold_weight != value))
			{
				this._ind_negative_threshhold_weight = value;
			}
		}
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=15)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this._eventid = value;
			}
		}
	}
	
	[Column(Storage="_event_name", DbType="NVarChar(50)")]
	[DataMember(Order=16)]
	public string event_name
	{
		get
		{
			return this._event_name;
		}
		set
		{
			if ((this._event_name != value))
			{
				this._event_name = value;
			}
		}
	}
}

[DataContract()]
public partial class spFX_GetEventTransactionLastResult
{
	
	private string _eventid;
	
	private string _name;
	
	private System.DateTime _eventdate;
	
	private System.TimeSpan _eventtime;
	
	private System.Nullable<decimal> _previous;
	
	private System.Nullable<decimal> _forecast;
	
	private System.Nullable<decimal> _actual;
	
	private string _currency;
	
	public spFX_GetEventTransactionLastResult()
	{
	}
	
	[Column(Storage="_eventid", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	[DataMember(Order=1)]
	public string eventid
	{
		get
		{
			return this._eventid;
		}
		set
		{
			if ((this._eventid != value))
			{
				this._eventid = value;
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	[DataMember(Order=2)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this._name = value;
			}
		}
	}
	
	[Column(Storage="_eventdate", DbType="Date NOT NULL")]
	[DataMember(Order=3)]
	public System.DateTime eventdate
	{
		get
		{
			return this._eventdate;
		}
		set
		{
			if ((this._eventdate != value))
			{
				this._eventdate = value;
			}
		}
	}
	
	[Column(Storage="_eventtime", DbType="Time NOT NULL")]
	[DataMember(Order=4)]
	public System.TimeSpan eventtime
	{
		get
		{
			return this._eventtime;
		}
		set
		{
			if ((this._eventtime != value))
			{
				this._eventtime = value;
			}
		}
	}
	
	[Column(Storage="_previous", DbType="Decimal(0,0)")]
	[DataMember(Order=5)]
	public System.Nullable<decimal> previous
	{
		get
		{
			return this._previous;
		}
		set
		{
			if ((this._previous != value))
			{
				this._previous = value;
			}
		}
	}
	
	[Column(Storage="_forecast", DbType="Decimal(0,0)")]
	[DataMember(Order=6)]
	public System.Nullable<decimal> forecast
	{
		get
		{
			return this._forecast;
		}
		set
		{
			if ((this._forecast != value))
			{
				this._forecast = value;
			}
		}
	}
	
	[Column(Storage="_actual", DbType="Decimal(0,0)")]
	[DataMember(Order=7)]
	public System.Nullable<decimal> actual
	{
		get
		{
			return this._actual;
		}
		set
		{
			if ((this._actual != value))
			{
				this._actual = value;
			}
		}
	}
	
	[Column(Storage="_currency", DbType="NChar(3)")]
	[DataMember(Order=8)]
	public string currency
	{
		get
		{
			return this._currency;
		}
		set
		{
			if ((this._currency != value))
			{
				this._currency = value;
			}
		}
	}
}
#pragma warning restore 1591
